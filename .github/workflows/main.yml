name: vprofile actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-1
    ECR_REGISTRY: vprofileapp
    EKS_CLUSTER: vprofile-eks

jobs:
    TESTING:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Maven test
              run: mvn test

            - name: Checkstyle
              run: mvn checkstyle:checkstyle

            - name: Set JAVA 11
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '11'

            # Setup SonarQube CLI
            - name: Setup SonarQube
              uses: warchant/setup-sonar-scanner@v7

            - name: SonarQube Scan
              run: sonar-scanner
                    -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
                    -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                    -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                    -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                    -Dsonar.sources=src/
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
                    -Dsonar.junit.reportsPath=target/surefire-reports/
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec 
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

            # - name: Sonar quality gate check
            #   id: sonar-quality-gate
            #   uses: sonarsource/sonarqube-quality-gate-action@master
            #   timeout-minutes: 5
            #   env:
            #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
    BUILD_AND_PUBLISH:
      needs: TESTING
      runs-on: ubuntu-latest
      steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REGISTRY }}
                region: ${{ env.AWS_REGION }}
                tags: latest, ${{github.run_number}}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./
    
    Deploy_To_EKS:
      needs: BUILD_AND_PUBLISH
      runs-on: ubuntu-latest
      steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: EKS Update kubeconfig
              run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}
            
            - name: Print config file
              run: cat ~/.kube/config

            - name: Login to ECR
              run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

            - name: Deploy to Helm
              uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
              with:
                aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws_region: ${{ env.AWS_REGION }}
                cluster_name: ${{ env.EKS_CLUSTER }}
                namespace: default
                chart: ./helm/vprofilecharts
                values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REGISTRY }},apptag=${{github.run_number}}
                name: vprofile-stack
                
      